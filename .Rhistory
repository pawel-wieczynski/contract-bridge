cat(paste0('\n\nIncorrect. Correct opening should be ', opening_correct, '.'))
}
sapply(players, count_suits)
sapply(players, calculate_hcp)
sapply(players, open_bid)
calculate_hcp = function(figures) {
hcp = 1 * length(grep('J', figures)) + 2 * length(grep('Q', figures)) + 3 * length(grep('K', figures)) + 4 * length(grep('A', figures))
return(hcp)
}
count_suits = function(colors) {
spades = length(grep('spades', colors))
hearts = length(grep('hearts', colors))
diamonds = length(grep('diamonds', colors))
clubs = length(grep('clubs', colors))
return(list(spades = spades, hearts = hearts, diamonds = diamonds, clubs = clubs))
}
players
sapply(players, calculate_hcp)
sapply(players, open_bid)
shuffle_cards = function(){
deck = expand.grid(
figures = c(2:10, 'J', 'Q', 'K', 'A')
,colors = c('spades', 'hearts', 'diamonds', 'clubs')
,stringsAsFactors = FALSE
)
cards = 1:52
players = list(
north = c()
,east = c()
,south = c()
,west = c()
)
for (i in seq_along(players)) {
players[[i]] = deck[sample(cards, 13, replace = FALSE), ]
cards = setdiff(cards, players[[i]])
}
return(players)
}
print_hand = function(hand){
# TBD functionalize below as well
# TBD sorting based on cards ordinality
spades = paste0('Spades: ', paste(sort(hand[hand$colors == 'spades', 1]), collapse = ', '))
hearts = paste0('Hearts: ', paste(sort(hand[hand$colors == 'hearts', 1]), collapse = ', '))
diamonds = paste0('Diamonds: ', paste(sort(hand[hand$colors == 'diamonds', 1]), collapse = ', '))
clubs = paste0('Clubs: ', paste(sort(hand[hand$colors == 'clubs', 1]), collapse = ', '))
cat(paste(spades, hearts, diamonds, clubs, sep = '\n'))
}
calculate_hcp = function(figures) {
hcp = 1 * length(grep('J', figures)) + 2 * length(grep('Q', figures)) + 3 * length(grep('K', figures)) + 4 * length(grep('A', figures))
return(hcp)
}
count_suits = function(colors) {
spades = length(grep('spades', colors))
hearts = length(grep('hearts', colors))
diamonds = length(grep('diamonds', colors))
clubs = length(grep('clubs', colors))
return(list(spades = spades, hearts = hearts, diamonds = diamonds, clubs = clubs))
}
figures = hand$figures
1 * length(grep('J', figures)) + 2 * length(grep('Q', figures)) + 3 * length(grep('K', figures)) + 4 * length(grep('A', figures))
figures
grep('J', figures)
length(grep('J', figures))
grep('Q', figures)
print_hand(players$south)
figures = players$south$figures
figures
1 * length(grep('J', figures)) + 2 * length(grep('Q', figures)) + 3 * length(grep('K', figures)) + 4 * length(grep('A', figures))
sapply(players, calculate_hcp)
shuffle_cards = function(){
deck = expand.grid(
figures = c(2:10, 'J', 'Q', 'K', 'A')
,colors = c('spades', 'hearts', 'diamonds', 'clubs')
,stringsAsFactors = FALSE
)
cards = 1:52
players = list(
north = c()
,east = c()
,south = c()
,west = c()
)
for (i in seq_along(players)) {
players[[i]] = deck[sample(cards, 13, replace = FALSE), ]
cards = setdiff(cards, players[[i]])
}
return(players)
}
print_hand = function(hand){
# TBD functionalize below as well
# TBD sorting based on cards ordinality
spades = paste0('Spades: ', paste(sort(hand[hand$colors == 'spades', 1]), collapse = ', '))
hearts = paste0('Hearts: ', paste(sort(hand[hand$colors == 'hearts', 1]), collapse = ', '))
diamonds = paste0('Diamonds: ', paste(sort(hand[hand$colors == 'diamonds', 1]), collapse = ', '))
clubs = paste0('Clubs: ', paste(sort(hand[hand$colors == 'clubs', 1]), collapse = ', '))
cat(paste(spades, hearts, diamonds, clubs, sep = '\n'))
}
calculate_hcp = function(figures) {
hcp = 1 * length(grep('J', figures)) + 2 * length(grep('Q', figures)) + 3 * length(grep('K', figures)) + 4 * length(grep('A', figures))
return(hcp)
}
count_suits = function(colors) {
spades = length(grep('spades', colors))
hearts = length(grep('hearts', colors))
diamonds = length(grep('diamonds', colors))
clubs = length(grep('clubs', colors))
return(list(spades = spades, hearts = hearts, diamonds = diamonds, clubs = clubs))
}
# Openings
open_bid = function(hand){
hcp = calculate_hcp(hand$figures)
suits = count_suits(hand$colors)
if (suits$spades >= 5 & hcp >= 12 & hcp <= 18) {
return('1 spades')
} else if (suits$hearts >= 5 & hcp >= 12 & hcp <= 18) {
return('1 hearts')
} else if (suits$diamonds >= 5 & hcp >= 12 & hcp <= 18) {
return('1 diamonds')
} else if (suits$clubs >= 2 & hcp >= 12 & hcp <= 18) {
return('1 clubs')
} else if (suits$spades >= 2 & suits$spades <= 4 &
suits$hearts >= 2 & suits$hearts <= 4 &
suits$diamonds >= 2 & suits$diamonds <= 4 &
suits$clubs >= 2 & suits$clubs <= 4 &
hcp >= 16 & hcp <= 18) {
return('1 NT')
} else if (suits$spades >= 5 & hcp >= 19 & hcp <= 22) {
return('2 spades')
} else if (suits$hearts >= 5 & hcp >= 19 & hcp <= 22) {
return('2 hearts')
} else if (suits$diamonds >= 4 & hcp >= 19 & hcp <= 22) {
return('2 diamonds')
} else if (suits$clubs >= 4 & hcp >= 19 & hcp <= 22) {
return('2 clubs')
} else if (suits$spades >= 2 & suits$spades <= 4 &
suits$hearts >= 2 & suits$hearts <= 4 &
suits$diamonds >= 2 & suits$diamonds <= 4 &
suits$clubs >= 2 & suits$clubs <= 4 &
hcp >= 19 & hcp <= 22) {
return('2 NT')
} else {
return('PASS')
}
}
players = shuffle_cards()
sapply(players, count_suits)
sapply(players, calculate_hcp)
sapply(players, open_bid)
shuffle_cards = function(){
deck = expand.grid(
figures = c(2:10, 'J', 'Q', 'K', 'A')
,colors = c('spades', 'hearts', 'diamonds', 'clubs')
,stringsAsFactors = FALSE
)
cards = 1:52
players = list(
north = c()
,east = c()
,south = c()
,west = c()
)
for (i in seq_along(players)) {
players[[i]] = deck[sample(cards, 13, replace = FALSE), ]
cards = setdiff(cards, players[[i]])
}
return(players)
}
print_hand = function(hand){
# TBD functionalize below as well
# TBD sorting based on cards ordinality
spades = paste0('Spades: ', paste(sort(hand[hand$colors == 'spades', 1]), collapse = ', '))
hearts = paste0('Hearts: ', paste(sort(hand[hand$colors == 'hearts', 1]), collapse = ', '))
diamonds = paste0('Diamonds: ', paste(sort(hand[hand$colors == 'diamonds', 1]), collapse = ', '))
clubs = paste0('Clubs: ', paste(sort(hand[hand$colors == 'clubs', 1]), collapse = ', '))
cat(paste(spades, hearts, diamonds, clubs, sep = '\n'))
}
calculate_hcp = function(hand) {
figures = hand$figures
hcp = 1 * length(grep('J', figures)) + 2 * length(grep('Q', figures)) + 3 * length(grep('K', figures)) + 4 * length(grep('A', figures))
return(hcp)
}
count_suits = function(hand) {
colors = hand$colors
spades = length(grep('spades', colors))
hearts = length(grep('hearts', colors))
diamonds = length(grep('diamonds', colors))
clubs = length(grep('clubs', colors))
return(list(spades = spades, hearts = hearts, diamonds = diamonds, clubs = clubs))
}
# sapply(players, count_suits)
#test: rowSums = 13, colSums = 13
# Openings
open_bid = function(hand){
hcp = calculate_hcp(hand$figures)
suits = count_suits(hand$colors)
if (suits$spades >= 5 & hcp >= 12 & hcp <= 18) {
return('1 spades')
} else if (suits$hearts >= 5 & hcp >= 12 & hcp <= 18) {
return('1 hearts')
} else if (suits$diamonds >= 5 & hcp >= 12 & hcp <= 18) {
return('1 diamonds')
} else if (suits$clubs >= 2 & hcp >= 12 & hcp <= 18) {
return('1 clubs')
} else if (suits$spades >= 2 & suits$spades <= 4 &
suits$hearts >= 2 & suits$hearts <= 4 &
suits$diamonds >= 2 & suits$diamonds <= 4 &
suits$clubs >= 2 & suits$clubs <= 4 &
hcp >= 16 & hcp <= 18) {
return('1 NT')
} else if (suits$spades >= 5 & hcp >= 19 & hcp <= 22) {
return('2 spades')
} else if (suits$hearts >= 5 & hcp >= 19 & hcp <= 22) {
return('2 hearts')
} else if (suits$diamonds >= 4 & hcp >= 19 & hcp <= 22) {
return('2 diamonds')
} else if (suits$clubs >= 4 & hcp >= 19 & hcp <= 22) {
return('2 clubs')
} else if (suits$spades >= 2 & suits$spades <= 4 &
suits$hearts >= 2 & suits$hearts <= 4 &
suits$diamonds >= 2 & suits$diamonds <= 4 &
suits$clubs >= 2 & suits$clubs <= 4 &
hcp >= 19 & hcp <= 22) {
return('2 NT')
} else {
return('PASS')
}
}
players = shuffle_cards()
sapply(players, count_suits)
sapply(players, calculate_hcp)
sapply(players, open_bid)
# Openings
open_bid = function(hand){
hcp = calculate_hcp(hand)
suits = count_suits(hand)
if (suits$spades >= 5 & hcp >= 12 & hcp <= 18) {
return('1 spades')
} else if (suits$hearts >= 5 & hcp >= 12 & hcp <= 18) {
return('1 hearts')
} else if (suits$diamonds >= 5 & hcp >= 12 & hcp <= 18) {
return('1 diamonds')
} else if (suits$clubs >= 2 & hcp >= 12 & hcp <= 18) {
return('1 clubs')
} else if (suits$spades >= 2 & suits$spades <= 4 &
suits$hearts >= 2 & suits$hearts <= 4 &
suits$diamonds >= 2 & suits$diamonds <= 4 &
suits$clubs >= 2 & suits$clubs <= 4 &
hcp >= 16 & hcp <= 18) {
return('1 NT')
} else if (suits$spades >= 5 & hcp >= 19 & hcp <= 22) {
return('2 spades')
} else if (suits$hearts >= 5 & hcp >= 19 & hcp <= 22) {
return('2 hearts')
} else if (suits$diamonds >= 4 & hcp >= 19 & hcp <= 22) {
return('2 diamonds')
} else if (suits$clubs >= 4 & hcp >= 19 & hcp <= 22) {
return('2 clubs')
} else if (suits$spades >= 2 & suits$spades <= 4 &
suits$hearts >= 2 & suits$hearts <= 4 &
suits$diamonds >= 2 & suits$diamonds <= 4 &
suits$clubs >= 2 & suits$clubs <= 4 &
hcp >= 19 & hcp <= 22) {
return('2 NT')
} else {
return('PASS')
}
}
players = shuffle_cards()
sapply(players, count_suits)
sapply(players, calculate_hcp)
sapply(players, open_bid)
deck = expand.grid(
figures = c(2:10, 'J', 'Q', 'K', 'A')
,colors = c('spades', 'hearts', 'diamonds', 'clubs')
,stringsAsFactors = FALSE
)
View(deck)
cards = 1:52
cards = 1:52
deck = expand.grid(
figures = c(2:10, 'J', 'Q', 'K', 'A')
,colors = c('spades', 'hearts', 'diamonds', 'clubs')
,stringsAsFactors = FALSE
)
deck$cards = 1:52
i=1
players[[i]] = deck[sample(deck$cards, 13, replace = FALSE), ]
View(players)
players = list(
north = c()
,east = c()
,south = c()
,west = c()
)
deck[sample(deck$cards, 13, replace = FALSE), ]
players[[i]] = deck[sample(deck$cards, 13, replace = FALSE), ]
View(players)
setdiff(deck$cards, players[[i]])
players[[i]]
setdiff(deck$cards, players[[i]]$cards)
deck = expand.grid(
figures = c(2:10, 'J', 'Q', 'K', 'A')
,colors = c('spades', 'hearts', 'diamonds', 'clubs')
,stringsAsFactors = FALSE
)
deck$cards = 1:52
players = list(
north = c()
,east = c()
,south = c()
,west = c()
)
for (i in seq_along(players)) {
players[[i]] = deck[sample(deck$cards, 13, replace = FALSE), ]
deck = deck[setdiff(deck$cards, players[[i]]$cards), ]
}
View(deck)
setdiff(deck$cards, players[[i]]$cards)
deck = expand.grid(
figures = c(2:10, 'J', 'Q', 'K', 'A')
,colors = c('spades', 'hearts', 'diamonds', 'clubs')
,stringsAsFactors = FALSE
)
deck$cards = 1:52
players = list(
north = c()
,east = c()
,south = c()
,west = c()
)
i=1
players[[i]] = deck[sample(deck$cards, 13, replace = FALSE), ]
deck = deck[setdiff(deck$cards, players[[i]]$cards), ]
i=2
View(deck)
players[[i]] = deck[sample(deck$cards, 13, replace = FALSE), ]
deck = deck[setdiff(deck$cards, players[[i]]$cards), ]
setdiff(deck$cards, players[[i]]$cards)
deck = expand.grid(
figures = c(2:10, 'J', 'Q', 'K', 'A')
,colors = c('spades', 'hearts', 'diamonds', 'clubs')
,stringsAsFactors = FALSE
)
deck$cards = 1:52
players = list(
north = c()
,east = c()
,south = c()
,west = c()
)
# TBD simplify
for (i in seq_along(players)) {
players[[i]] = deck[sample(deck$cards, 13, replace = FALSE), ]
deck = deck[deck$cards == setdiff(deck$cards, players[[i]]$cards), ]
}
deck = expand.grid(
figures = c(2:10, 'J', 'Q', 'K', 'A')
,colors = c('spades', 'hearts', 'diamonds', 'clubs')
,stringsAsFactors = FALSE
)
deck$cards = 1:52
players = list(
north = c()
,east = c()
,south = c()
,west = c()
)
i=1
players[[i]] = deck[sample(deck$cards, 13, replace = FALSE), ]
deck = deck[deck$cards == setdiff(deck$cards, players[[i]]$cards), ]
setdiff(deck$cards, players[[i]]$cards)
sample(deck$cards, 13, replace = FALSE)
players[[i]]
players[[i]]$cards
deck = expand.grid(
figures = c(2:10, 'J', 'Q', 'K', 'A')
,colors = c('spades', 'hearts', 'diamonds', 'clubs')
,stringsAsFactors = FALSE
)
deck$cards = 1:52
players = list(
north = c()
,east = c()
,south = c()
,west = c()
)
players[[i]] = deck[sample(deck$cards, 13, replace = FALSE), ]
players[[i]]$cards
setdiff(deck$cards, players[[i]]$cards)
deck$cards == setdiff(deck$cards, players[[i]]$cards)
deck$cards %in% setdiff(deck$cards, players[[i]]$cards)
deck = expand.grid(
figures = c(2:10, 'J', 'Q', 'K', 'A')
,colors = c('spades', 'hearts', 'diamonds', 'clubs')
,stringsAsFactors = FALSE
)
deck$cards = 1:52
players = list(
north = c()
,east = c()
,south = c()
,west = c()
)
# TBD simplify
for (i in seq_along(players)) {
players[[i]] = deck[sample(deck$cards, 13, replace = FALSE), ]
deck = deck[deck$cards %in% setdiff(deck$cards, players[[i]]$cards), ]
}
deck = expand.grid(
figures = c(2:10, 'J', 'Q', 'K', 'A')
,colors = c('spades', 'hearts', 'diamonds', 'clubs')
,stringsAsFactors = FALSE
)
deck$cards = 1:52
players = list(
north = c()
,east = c()
,south = c()
,west = c()
)
i=1
players[[i]] = deck[sample(deck$cards, 13, replace = FALSE), ]
players[[i]]$cards
setdiff(deck$cards, players[[i]]$cards)
deck$cards %in% setdiff(deck$cards, players[[i]]$cards)
sum(deck$cards %in% setdiff(deck$cards, players[[i]]$cards))
deck = deck[deck$cards %in% setdiff(deck$cards, players[[i]]$cards), ]
i=2
players[[i]] = deck[sample(deck$cards, 13, replace = FALSE), ]
players[[i]]$cards
View(deck)
sample(deck$cards, 13, replace = FALSE)
sample(deck$cards, 13, replace = FALSE)
players[[i]]$cards
players[[i]] = deck[sample(deck$cards, 13, replace = FALSE), ]
players[[i]]$cards
View(players)
players[["east"]]
deck = expand.grid(
figures = c(2:10, 'J', 'Q', 'K', 'A')
,colors = c('spades', 'hearts', 'diamonds', 'clubs')
,stringsAsFactors = FALSE
)
deck$cards = 1:52
players = list(
north = c()
,east = c()
,south = c()
,west = c()
)
# TBD simplify
for (i in seq_along(players)) {
players[[i]] = deck[deck$cards %in% sample(deck$cards, 13, replace = FALSE), ]
deck = deck[deck$cards %in% setdiff(deck$cards, players[[i]]$cards), ]
}
source("C:/Users/Pawel/Desktop/contract-bridge/bridge.R")
players = shuffle_cards()
sapply(players, count_suits)
sapply(players, calculate_hcp)
sapply(players, open_bid)
if(!require('pacman')) install.packages('pacman')
pacman::p_load(svDialogs)
source('bridge.R')
possible_contracts = expand.grid(
figures = c(1:2)
,colors = c('spades', 'hearts', 'diamonds', 'clubs', 'NT')
)
possible_contracts = c(sort(paste0(possible_contracts$figures, ' ', possible_contracts$colors)), 'PASS')
players = shuffle_cards()
print_hand(players$south)
players = shuffle_cards()
print_hand(players$south)
players = shuffle_cards()
print_hand(players$south)
opening = svDialogs::dlg_list(possible_contracts, title = 'How would you open?')$res
opening_correct = open_bid(players$south)
if (opening == opening_correct) {
cat('\n\nCorrect.')
} else {
cat(paste0('\n\nIncorrect. Correct opening should be ', opening_correct, '.'))
}
players = shuffle_cards()
print_hand(players$south)
opening = svDialogs::dlg_list(possible_contracts, title = 'How would you open?')$res
opening_correct = open_bid(players$south)
if (opening == opening_correct) {
cat('\n\nCorrect.')
} else {
cat(paste0('\n\nIncorrect. Correct opening should be ', opening_correct, '.'))
}
players = shuffle_cards()
print_hand(players$south)
opening = svDialogs::dlg_list(possible_contracts, title = 'How would you open?')$res
opening_correct = open_bid(players$south)
if (opening == opening_correct) {
cat('\n\nCorrect.')
} else {
cat(paste0('\n\nIncorrect. Correct opening should be ', opening_correct, '.'))
}
players = shuffle_cards()
print_hand(players$south)
players = shuffle_cards()
print_hand(players$south)
players = shuffle_cards()
print_hand(players$south)
opening = svDialogs::dlg_list(possible_contracts, title = 'How would you open?')$res
opening_correct = open_bid(players$south)
if (opening == opening_correct) {
cat('\n\nCorrect.')
} else {
cat(paste0('\n\nIncorrect. Correct opening should be ', opening_correct, '.'))
}
